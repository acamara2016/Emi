{"ast":null,"code":"import firebase from 'firebase/app';\nimport \"firebase/auth\";\nimport \"firebase/firestore\";\nconst firebaseConfig = {\n  apiKey: \"AIzaSyD1gDP7SY5J5IXuHxqhIPGT_tXmWlpOfsI\",\n  authDomain: \"emi-sweb.firebaseapp.com\",\n  databaseURL: \"https://emi-sweb-default-rtdb.firebaseio.com\",\n  projectId: \"emi-sweb\",\n  storageBucket: \"emi-sweb.appspot.com\",\n  messagingSenderId: \"54635582580\",\n  appId: \"1:54635582580:web:facba273a32b31d8d96d21\",\n  measurementId: \"G-11B0SRBZB0\"\n};\nfirebase.initializeApp(firebaseConfig);\nexport const auth = firebase.auth();\nexport const firestore = firebase.firestore();\nconst provider = new firebase.auth.GoogleAuthProvider();\nexport const signInWithGoogle = () => {\n  auth.signInWithPopup(provider);\n};\nconst userRef = firestore.doc(`users/${user.uid}`);\nconst snapshot = await userRef.get();\nexport const generateUserDocument = async (user, additionalData) => {\n  if (!user) return;\n  const userRef = firestore.doc(`users/${user.uid}`);\n  const snapshot = await userRef.get();\n\n  if (!snapshot.exists) {\n    const {\n      email,\n      displayName,\n      photoURL\n    } = user;\n\n    try {\n      await userRef.set({\n        displayName,\n        email,\n        photoURL,\n        ...additionalData\n      });\n    } catch (error) {\n      console.error(\"Error creating user document\", error);\n    }\n  }\n\n  return getUserDocument(user.uid);\n};\n\nconst getUserDocument = async uid => {\n  if (!uid) return null;\n\n  try {\n    const userDocument = await firestore.doc(`users/${uid}`).get();\n    return {\n      uid,\n      ...userDocument.data()\n    };\n  } catch (error) {\n    console.error(\"Error fetching user\", error);\n  }\n};","map":{"version":3,"sources":["C:/Users/papus/emi/src/pages/components/firebase.js"],"names":["firebase","firebaseConfig","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","initializeApp","auth","firestore","provider","GoogleAuthProvider","signInWithGoogle","signInWithPopup","userRef","doc","user","uid","snapshot","get","generateUserDocument","additionalData","exists","email","displayName","photoURL","set","error","console","getUserDocument","userDocument","data"],"mappings":"AAAA,OAAOA,QAAP,MAAqB,cAArB;AACA,OAAO,eAAP;AACA,OAAO,oBAAP;AAEA,MAAMC,cAAc,GAAG;AACnBC,EAAAA,MAAM,EAAE,yCADW;AAEnBC,EAAAA,UAAU,EAAE,0BAFO;AAGnBC,EAAAA,WAAW,EAAE,8CAHM;AAInBC,EAAAA,SAAS,EAAE,UAJQ;AAKnBC,EAAAA,aAAa,EAAE,sBALI;AAMnBC,EAAAA,iBAAiB,EAAE,aANA;AAOnBC,EAAAA,KAAK,EAAE,0CAPY;AAQnBC,EAAAA,aAAa,EAAE;AARI,CAAvB;AAWET,QAAQ,CAACU,aAAT,CAAuBT,cAAvB;AACF,OAAO,MAAMU,IAAI,GAAGX,QAAQ,CAACW,IAAT,EAAb;AACP,OAAO,MAAMC,SAAS,GAAGZ,QAAQ,CAACY,SAAT,EAAlB;AACP,MAAMC,QAAQ,GAAG,IAAIb,QAAQ,CAACW,IAAT,CAAcG,kBAAlB,EAAjB;AACA,OAAO,MAAMC,gBAAgB,GAAG,MAAM;AAClCJ,EAAAA,IAAI,CAACK,eAAL,CAAqBH,QAArB;AACD,CAFI;AAIL,MAAMI,OAAO,GAAGL,SAAS,CAACM,GAAV,CAAe,SAAQC,IAAI,CAACC,GAAI,EAAhC,CAAhB;AACA,MAAMC,QAAQ,GAAG,MAAMJ,OAAO,CAACK,GAAR,EAAvB;AAEA,OAAO,MAAMC,oBAAoB,GAAG,OAAOJ,IAAP,EAAaK,cAAb,KAAgC;AAClE,MAAI,CAACL,IAAL,EAAW;AACX,QAAMF,OAAO,GAAGL,SAAS,CAACM,GAAV,CAAe,SAAQC,IAAI,CAACC,GAAI,EAAhC,CAAhB;AACA,QAAMC,QAAQ,GAAG,MAAMJ,OAAO,CAACK,GAAR,EAAvB;;AACA,MAAI,CAACD,QAAQ,CAACI,MAAd,EAAsB;AACpB,UAAM;AAAEC,MAAAA,KAAF;AAASC,MAAAA,WAAT;AAAsBC,MAAAA;AAAtB,QAAmCT,IAAzC;;AACA,QAAI;AACF,YAAMF,OAAO,CAACY,GAAR,CAAY;AAChBF,QAAAA,WADgB;AAEhBD,QAAAA,KAFgB;AAGhBE,QAAAA,QAHgB;AAIhB,WAAGJ;AAJa,OAAZ,CAAN;AAMD,KAPD,CAOE,OAAOM,KAAP,EAAc;AACdC,MAAAA,OAAO,CAACD,KAAR,CAAc,8BAAd,EAA8CA,KAA9C;AACD;AACF;;AACD,SAAOE,eAAe,CAACb,IAAI,CAACC,GAAN,CAAtB;AACD,CAlBM;;AAmBP,MAAMY,eAAe,GAAG,MAAMZ,GAAN,IAAa;AACnC,MAAI,CAACA,GAAL,EAAU,OAAO,IAAP;;AACV,MAAI;AACF,UAAMa,YAAY,GAAG,MAAMrB,SAAS,CAACM,GAAV,CAAe,SAAQE,GAAI,EAA3B,EAA8BE,GAA9B,EAA3B;AACA,WAAO;AACLF,MAAAA,GADK;AAEL,SAAGa,YAAY,CAACC,IAAb;AAFE,KAAP;AAID,GAND,CAME,OAAOJ,KAAP,EAAc;AACdC,IAAAA,OAAO,CAACD,KAAR,CAAc,qBAAd,EAAqCA,KAArC;AACD;AACF,CAXD","sourcesContent":["import firebase from 'firebase/app';\r\nimport \"firebase/auth\";\r\nimport \"firebase/firestore\";\r\n\r\nconst firebaseConfig = {\r\n    apiKey: \"AIzaSyD1gDP7SY5J5IXuHxqhIPGT_tXmWlpOfsI\",\r\n    authDomain: \"emi-sweb.firebaseapp.com\",\r\n    databaseURL: \"https://emi-sweb-default-rtdb.firebaseio.com\",\r\n    projectId: \"emi-sweb\",\r\n    storageBucket: \"emi-sweb.appspot.com\",\r\n    messagingSenderId: \"54635582580\",\r\n    appId: \"1:54635582580:web:facba273a32b31d8d96d21\",\r\n    measurementId: \"G-11B0SRBZB0\"\r\n  };\r\n\r\n  firebase.initializeApp(firebaseConfig);\r\nexport const auth = firebase.auth();\r\nexport const firestore = firebase.firestore();\r\nconst provider = new firebase.auth.GoogleAuthProvider();\r\nexport const signInWithGoogle = () => {\r\n    auth.signInWithPopup(provider);\r\n  };\r\n\r\n  const userRef = firestore.doc(`users/${user.uid}`);\r\n  const snapshot = await userRef.get();\r\n\r\n  export const generateUserDocument = async (user, additionalData) => {\r\n    if (!user) return;\r\n    const userRef = firestore.doc(`users/${user.uid}`);\r\n    const snapshot = await userRef.get();\r\n    if (!snapshot.exists) {\r\n      const { email, displayName, photoURL } = user;\r\n      try {\r\n        await userRef.set({\r\n          displayName,\r\n          email,\r\n          photoURL,\r\n          ...additionalData\r\n        });\r\n      } catch (error) {\r\n        console.error(\"Error creating user document\", error);\r\n      }\r\n    }\r\n    return getUserDocument(user.uid);\r\n  };\r\n  const getUserDocument = async uid => {\r\n    if (!uid) return null;\r\n    try {\r\n      const userDocument = await firestore.doc(`users/${uid}`).get();\r\n      return {\r\n        uid,\r\n        ...userDocument.data()\r\n      };\r\n    } catch (error) {\r\n      console.error(\"Error fetching user\", error);\r\n    }\r\n  };"]},"metadata":{},"sourceType":"module"}